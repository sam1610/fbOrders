import React, { useState, useMemo, useEffect } from 'react';
import { Authenticator, useAuthenticator, Button, Heading } from '@aws-amplify/ui-react';
import '@aws-amplify/ui-react/styles.css';
import { Amplify } from 'aws-amplify';
import { generateClient } from 'aws-amplify/data';
// This is the key change: we now import auth functions directly
import { fetchAuthSession } from 'aws-amplify/auth';
import * as Recharts from 'recharts';

// These imports are generated by Amplify and connect the frontend to the backend
import outputs from '../amplify_outputs.json'; 
import { type Schema } from '../amplify/data/resource'; 

// Configure the Amplify client library with the backend resources
Amplify.configure(outputs);

// Generate a fully-typed GraphQL client from your schema for DATA operations
const client = generateClient<Schema>();

// --- Helper Functions & Static Components ---
const classNames = (...classes: (string | boolean | undefined)[]) => classes.filter(Boolean).join(' ');
const statusColors = { 
    ORDERED: 'bg-blue-500', 
    IN_PREPARATION: 'bg-yellow-500', 
    PREPARED: 'bg-green-500', 
    DELIVERED: 'bg-gray-500', 
    CANCELLED: 'bg-red-500' 
};

// --- Icon Components ---
const HomeIcon = ({ className }: { className: string }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>;
const ClipboardListIcon = ({ className }: { className: string }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><rect width="8" height="4" x="8" y="2" rx="1" ry="1"></rect><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><path d="M12 11h4"></path><path d="M12 16h4"></path><path d="M8 11h.01"></path><path d="M8 16h.01"></path></svg>;
const UsersIcon = ({ className }: { className: string }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>;
const TruckIcon = ({ className }: { className: string }) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}><path d="M5 18H3c-.6 0-1-.4-1-1V7c0-.6.4-1 1-1h10c.6 0 1 .4 1 1v11"></path><path d="M14 9h7l4 4v4h-8.2"></path><circle cx="7.5" cy="18.5" r="2.5"></circle><circle cx="17.5" cy="18.5" r="2.5"></circle></svg>;


// --- Core App Logic ---
function App() {
    const { user, signOut } = useAuthenticator((context) => [context.user]);
    const [userRole, setUserRole] = useState<'BusinessOwner' | 'DeliveryAgent' | null>(null);
    const [loading, setLoading] = useState(true);

    // This effect runs once to determine the user's role from their session token.
    useEffect(() => {
        const checkUserRole = async () => {
            try {
                // Corrected: Use the dedicated fetchAuthSession function
                const session = await fetchAuthSession();
                const groups = session.tokens?.accessToken.payload['cognito:groups'] as string[] | undefined;
                if (groups?.includes('BusinessOwners')) {
                    setUserRole('BusinessOwner');
                } else if (groups?.includes('DeliveryAgents')) {
                    setUserRole('DeliveryAgent');
                } else {
                    setUserRole(null); // No specific role found
                }
            } catch (error) {
                console.error("Error fetching user session:", error);
                setUserRole(null);
            } finally {
                setLoading(false);
            }
        };
        checkUserRole();
    }, [user]);

    if (loading) {
        return <div className="bg-slate-900 text-white min-h-screen flex items-center justify-center"><h1>Authenticating...</h1></div>;
    }

    // Render the appropriate UI based on the determined user role.
    return (
        <div className="bg-slate-900 text-slate-200 min-h-screen font-sans">
            <header className="bg-slate-800 p-4 flex justify-between items-center">
                <Heading level={5} className="text-white">Cloud Kitchen Operations</Heading>
                <Button onClick={signOut} variation="primary" size="small">Sign Out</Button>
            </header>
            <main>
                {userRole === 'BusinessOwner' && <BusinessOwnerDashboard user={user}/>}
                {userRole === 'DeliveryAgent' && <DeliveryAgentDashboard user={user}/>}
                {!userRole && (
                    <div className="p-8 text-center">
                        <Heading level={3}>Access Denied</Heading>
                        <p className="mt-2 text-slate-400">You do not have the required permissions to view this application.</p>
                    </div>
                )}
            </main>
        </div>
    );
}

// --- Business Owner Components ---

function BusinessOwnerDashboard({ user }: { user: any }) {
    const [activeView, setActiveView] = useState('dashboard');
    const [modal, setModal] = useState<any>(null);
    
    const [orders, setOrders] = useState<Schema['Order'][]>([]);
    const [customers, setCustomers] = useState<Schema['Customer'][]>([]);
    const [deliveryAgents, setDeliveryAgents] = useState<Schema['DeliveryAgent'][]>([]);
    const [loading, setLoading] = useState(true);

    const MOCK_BUSINESS_ID = 'the-cloud-kitchen-123'; 

    useEffect(() => {
        const fetchAllData = async () => {
            try {
                const [ordersData, customersData, agentsData] = await Promise.all([
                    client.models.Order.list({ filter: { businessId: { eq: MOCK_BUSINESS_ID } } }),
                    client.models.Customer.list(),
                    client.models.DeliveryAgent.list()
                ]);
                setOrders(ordersData.data);
                setCustomers(customersData.data);
                setDeliveryAgents(agentsData.data);
            } catch (error) { console.error("Error fetching data:", error); }
            finally { setLoading(false); }
        };
        fetchAllData();

        const subs = [
            client.models.Order.onCreate({ filter: { businessId: { eq: MOCK_BUSINESS_ID } } }).subscribe(newOrder => setOrders(prev => [newOrder, ...prev])),
            client.models.Order.onUpdate({ filter: { businessId: { eq: MOCK_BUSINESS_ID } } }).subscribe(updatedOrder => setOrders(prev => prev.map(o => o.id === updatedOrder.id ? updatedOrder : o))),
        ];
        return () => subs.forEach(sub => sub.unsubscribe());
    }, [MOCK_BUSINESS_ID]);

    const handleAssignDelivery = async (agentId: string, selectedOrderIds: string[]) => {
        const updatePromises = selectedOrderIds.map(orderId => {
            const orderToUpdate = orders.find(o => o.orderId === orderId);
            if (!orderToUpdate) return null;
            // When assigning, populate both deliveryAgentId for business logic
            // and 'owner' for the authorization rule.
            return client.models.Order.update({
                businessId: orderToUpdate.businessId,
                orderId: orderToUpdate.orderId,
                deliveryAgentId: agentId, 
                owner: agentId, // Set the owner field for the agent
            });
        });
        await Promise.all(updatePromises.filter(p => p));
        setModal(null);
    };

    if (loading) return <div className="p-8 text-center">Loading Business Data...</div>;

    const renderView = () => {
        switch (activeView) {
            case 'dashboard': return <DashboardView orders={orders} setModal={setModal} />;
            case 'orders': return <OrdersView orders={orders} setModal={setModal} />;
            case 'customers': return <CustomersView customers={customers} />;
            default: return <DashboardView orders={orders} setModal={setModal} />;
        }
    };
    
    const renderModal = () => {
        if (!modal) return null;
        if (modal.type === 'orderDetail') return <OrderDetailModal order={modal.data.order} onClose={() => setModal(null)} />;
        if (modal.type === 'assignDelivery') return <AssignDeliveryModal orders={orders} deliveryAgents={deliveryAgents} onAssign={handleAssignDelivery} onClose={() => setModal(null)} />;
        return null;
    };

    return (
        <div className="pb-20">
            {renderModal()}
            {renderView()}
            <nav className="fixed bottom-0 left-0 right-0 bg-slate-800 border-t border-slate-700 flex justify-around">
                <button onClick={() => setActiveView('dashboard')} className={classNames('flex-1 flex flex-col items-center justify-center py-2', activeView === 'dashboard' ? 'text-sky-400' : 'text-slate-400')}><HomeIcon className="h-6 w-6 mb-1" /> <span className="text-xs">Dashboard</span></button>
                <button onClick={() => setActiveView('orders')} className={classNames('flex-1 flex flex-col items-center justify-center py-2', activeView === 'orders' ? 'text-sky-400' : 'text-slate-400')}><ClipboardListIcon className="h-6 w-6 mb-1" /><span className="text-xs">Orders</span></button>
                <button onClick={() => setActiveView('customers')} className={classNames('flex-1 flex flex-col items-center justify-center py-2', activeView === 'customers' ? 'text-sky-400' : 'text-slate-400')}><UsersIcon className="h-6 w-6 mb-1" /><span className="text-xs">Customers</span></button>
            </nav>
        </div>
    );
}

// --- Delivery Agent Components ---

function DeliveryAgentDashboard({ user }: { user: any }) {
    const [assignedOrders, setAssignedOrders] = useState<Schema['Order'][]>([]);
    const [loading, setLoading] = useState(true);
    const [modal, setModal] = useState<any>(null);

    useEffect(() => {
        // Agents fetch ONLY the orders assigned to them using the specific GSI.
        const fetchAssignedOrders = async () => {
            try {
                // The 'ordersByDeliveryAgent' query is automatically created from your schema's GSI.
                const response = await client.models.Order.ordersByDeliveryAgent({
                    deliveryAgentId: user.userId // user.userId is the agent's unique Cognito ID (sub)
                });
                setAssignedOrders(response.data);
            } catch (err) { console.error("Error fetching assigned orders:", err); }
            finally { setLoading(false); }
        };

        fetchAssignedOrders();

        const sub = client.models.Order.onUpdate({ filter: { owner: { eq: user.userId } } }).subscribe(updatedOrder => {
            setAssignedOrders(prev => prev.map(o => o.id === updatedOrder.id ? updatedOrder : o));
        });
        return () => sub.unsubscribe();

    }, [user.userId]);

    const handleUpdateStatus = async (order: Schema['Order'], newStatus: Schema['Order']['status']) => {
        try {
            await client.models.Order.update({
                businessId: order.businessId,
                orderId: order.orderId,
                status: newStatus
            });
        } catch (error) { console.error("Error updating status:", error); }
        setModal(null);
    };

    if (loading) return <div className="p-8 text-center">Loading Assigned Deliveries...</div>;

    return (
        <div className="p-4 space-y-4">
            {modal?.type === 'updateStatus' && <UpdateStatusModal order={modal.data.order} onUpdate={handleUpdateStatus} onClose={() => setModal(null)} />}
            <div className="flex items-center space-x-3">
                <TruckIcon className="h-8 w-8 text-sky-400" />
                <Heading level={3}>Your Assigned Deliveries</Heading>
            </div>
            {assignedOrders.length === 0 && <p className="text-slate-400">No deliveries are currently assigned to you.</p>}
            <div className="space-y-3">
                {assignedOrders
                    .filter(o => o.status !== 'DELIVERED' && o.status !== 'CANCELLED')
                    .map(order => (
                    <div key={order.orderId} onClick={() => setModal({ type: 'updateStatus', data: { order } })} className="bg-slate-800 p-3 rounded-lg flex justify-between items-center cursor-pointer transition hover:bg-slate-700">
                        <div>
                            <p className="font-bold text-white">{order.orderId}</p>
                            <p className="text-sm text-slate-400">{order.customerPhone}</p>
                        </div>
                        <div className="text-right">
                            <p className="font-bold text-white">${order.amount.toFixed(2)}</p>
                            <span className={classNames(statusColors[order.status], 'text-xs font-semibold px-2 py-0.5 rounded-full text-white')}>{order.status}</span>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
}


// --- UI View and Modal Components (definitions would go here) ---

const DashboardView = ({ orders, setModal }: { orders: Schema['Order'][], setModal: Function }) => {
    const today = new Date().toISOString().slice(0, 10);
    const todaysOrders = useMemo(() => orders.filter(o => o.orderDate?.startsWith(today)), [orders, today]);

    const kpis = useMemo(() => ({
        totalOrders: todaysOrders.length,
        revenueToday: todaysOrders.reduce((acc, o) => o.status === 'DELIVERED' ? acc + o.amount : acc, 0),
        inProgress: todaysOrders.filter(o => o.status === 'IN_PREPARATION').length,
        readyForDelivery: todaysOrders.filter(o => o.status === 'PREPARED').length,
    }), [todaysOrders]);
    
    const chartData = useMemo(() => {
        const statusCounts = todaysOrders.reduce((acc, o) => {
            acc[o.status] = (acc[o.status] || 0) + 1;
            return acc;
        }, {} as Record<string, number>);
        return Object.entries(statusCounts).map(([name, value]) => ({ name, orders: value }));
    }, [todaysOrders]);

    return (
        <div className="p-4 space-y-6">
            <header>
                <h1 className="text-2xl font-bold text-white">Good Morning, Cloud Kitchen</h1>
                <p className="text-slate-400">{new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</p>
            </header>
            
            <div className="grid grid-cols-2 gap-4">
                <div className="bg-slate-800 p-4 rounded-lg shadow-md text-center"><p className="text-slate-400 text-sm">Total Orders</p><p className="text-3xl font-bold text-white">{kpis.totalOrders}</p></div>
                <div className="bg-slate-800 p-4 rounded-lg shadow-md text-center"><p className="text-slate-400 text-sm">Revenue Today</p><p className="text-3xl font-bold text-white">${kpis.revenueToday.toFixed(2)}</p></div>
                <div className="bg-yellow-800/50 p-4 rounded-lg shadow-md text-center"><p className="text-yellow-300 text-sm">In Progress</p><p className="text-3xl font-bold text-white">{kpis.inProgress}</p></div>
                <button onClick={() => setModal({ type: 'assignDelivery' })} className="bg-green-800/50 p-4 rounded-lg shadow-md text-center transition hover:bg-green-700/50 disabled:opacity-50" disabled={kpis.readyForDelivery === 0}>
                    <p className="text-green-300 text-sm">Ready for Delivery</p>
                    <p className="text-3xl font-bold text-white">{kpis.readyForDelivery}</p>
                </button>
            </div>

            <div className="bg-slate-800 p-4 rounded-lg shadow-md">
                 <h2 className="text-lg font-semibold text-white mb-4">Today's Order Status</h2>
                 <div style={{ width: '100%', height: 300 }}>
                    <Recharts.ResponsiveContainer>
                        <Recharts.BarChart data={chartData}>
                            <Recharts.XAxis dataKey="name" stroke="#94a3b8" />
                            <Recharts.YAxis stroke="#94a3b8" />
                            <Recharts.Tooltip contentStyle={{ backgroundColor: '#1e293b', border: 'none' }} />
                            <Recharts.Bar dataKey="orders" fill="#38bdf8" />
                        </Recharts.BarChart>
                    </Recharts.ResponsiveContainer>
                 </div>
            </div>
        </div>
    );
};

const OrdersView = ({ orders, setModal }: { orders: Schema['Order'][], setModal: Function }) => {
    const [filter, setFilter] = useState('active');

    const filteredOrders = useMemo(() => {
        if (filter === 'active') return orders.filter(o => o.status !== 'DELIVERED' && o.status !== 'CANCELLED');
        if (filter === 'all') return [...orders].sort((a, b) => new Date(b.orderDate).getTime() - new Date(a.orderDate).getTime());
        return orders.filter(o => o.status === filter.toUpperCase());
    }, [orders, filter]);

    return (
        <div className="p-4">
            <h1 className="text-2xl font-bold text-white mb-4">Order Management</h1>
            <div className="flex space-x-2 mb-4">
                <button onClick={() => setFilter('active')} className={classNames(filter === 'active' ? 'bg-sky-500 text-white' : 'bg-slate-700', 'px-3 py-1 text-sm rounded-full')}>Active</button>
                <button onClick={() => setFilter('prepared')} className={classNames(filter === 'prepared' ? 'bg-sky-500 text-white' : 'bg-slate-700', 'px-3 py-1 text-sm rounded-full')}>Prepared</button>
                <button onClick={() => setFilter('all')} className={classNames(filter === 'all' ? 'bg-sky-500 text-white' : 'bg-slate-700', 'px-3 py-1 text-sm rounded-full')}>All Orders</button>
            </div>
            <div className="space-y-3">
                {filteredOrders.map(order => (
                    <div key={order.orderId} onClick={() => setModal({ type: 'orderDetail', data: { order } })} className="bg-slate-800 p-3 rounded-lg flex justify-between items-center cursor-pointer transition hover:bg-slate-700">
                        <div>
                            <p className="font-bold text-white">{order.orderId}</p>
                            <p className="text-sm text-slate-400">{order.customerPhone}</p>
                        </div>
                        <div className="text-right">
                            <p className="font-bold text-white">${order.amount.toFixed(2)}</p>
                            <span className={classNames(statusColors[order.status], 'text-xs font-semibold px-2 py-0.5 rounded-full text-white')}>{order.status}</span>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

const CustomersView = ({ customers }: { customers: Schema['Customer'][] }) => {
    return (
        <div className="p-4">
            <h1 className="text-2xl font-bold text-white mb-4">Customers</h1>
            <div className="space-y-3">
                {customers.map(customer => (
                    <div key={customer.customerPhone} className="bg-slate-800 p-3 rounded-lg flex justify-between items-center">
                        <div>
                            <p className="font-bold text-white">{customer.customerName}</p>
                            <p className="text-sm text-slate-400">{customer.customerPhone}</p>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    );
};

const OrderDetailModal = ({ order, onClose }: { order: Schema['Order'], onClose: Function }) => {
    const lineItems = useMemo(() => {
        try {
            return JSON.parse(order.lineItems);
        } catch (e) { return []; }
    }, [order.lineItems]);

    return (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
            <div className="bg-slate-800 rounded-lg w-full max-w-md shadow-xl">
                <div className="p-4 border-b border-slate-700 flex justify-between items-center">
                    <h2 className="text-lg font-bold text-white">{order.orderId} Details</h2>
                    <button onClick={() => onClose()} className="text-slate-400 hover:text-white text-2xl">&times;</button>
                </div>
                <div className="p-4 space-y-4">
                    <div>
                        <h3 className="font-semibold text-white">Line Items</h3>
                        <ul className="space-y-1 mt-1 text-slate-300">
                            {lineItems.map((item: any, index: number) => (
                                <li key={index} className="flex justify-between text-sm">
                                    <span>{item.quantity} x {item.item}</span>
                                    <span>${item.price.toFixed(2)}</span>
                                </li>
                            ))}
                        </ul>
                    </div>
                     <div className="border-t border-slate-700 pt-2 flex justify-between font-bold text-white">
                        <span>Total Amount</span>
                        <span>${order.amount.toFixed(2)}</span>
                    </div>
                </div>
            </div>
        </div>
    );
};

const AssignDeliveryModal = ({ orders, deliveryAgents, onAssign, onClose }: { orders: Schema['Order'][], deliveryAgents: Schema['DeliveryAgent'][], onAssign: Function, onClose: Function }) => {
    const [selectedAgent, setSelectedAgent] = useState(deliveryAgents[0]?.agentId || '');
    const preparedOrders = useMemo(() => orders.filter(o => o.status === 'PREPARED'), [orders]);
    const [selectedOrders, setSelectedOrders] = useState(() => preparedOrders.map(o => o.orderId));

    const toggleOrderSelection = (orderId: string) => {
        setSelectedOrders(prev => prev.includes(orderId) ? prev.filter(id => id !== orderId) : [...prev, orderId]);
    };

    const handleAssign = () => {
        if (!selectedAgent || selectedOrders.length === 0) return;
        onAssign(selectedAgent, selectedOrders);
    };

    return (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
            <div className="bg-slate-800 rounded-lg w-full max-w-md shadow-xl">
                <div className="p-4 border-b border-slate-700 flex justify-between items-center">
                    <h2 className="text-lg font-bold text-white">Assign Delivery</h2>
                    <button onClick={() => onClose()} className="text-slate-400 hover:text-white text-2xl">&times;</button>
                </div>
                <div className="p-4 space-y-4">
                    <div>
                        <label htmlFor="agent" className="block text-sm font-medium text-slate-300 mb-1">Select Delivery Agent</label>
                        <select id="agent" value={selectedAgent} onChange={e => setSelectedAgent(e.target.value)} className="w-full bg-slate-700 text-white rounded-md p-2 border border-slate-600 focus:ring-sky-500 focus:border-sky-500">
                           {deliveryAgents.map(agent => <option key={agent.agentId} value={agent.agentId}>{agent.agentName}</option>)}
                        </select>
                    </div>
                    <div>
                        <h3 className="font-semibold text-white">Select Orders to Assign</h3>
                        <div className="mt-2 space-y-2 max-h-60 overflow-y-auto">
                            {preparedOrders.map(order => (
                                <div key={order.orderId} className="flex items-center bg-slate-700 p-2 rounded-md">
                                    <input 
                                        type="checkbox" 
                                        id={order.orderId} 
                                        checked={selectedOrders.includes(order.orderId)}
                                        onChange={() => toggleOrderSelection(order.orderId)}
                                        className="h-4 w-4 rounded border-slate-500 text-sky-600 focus:ring-sky-500"
                                    />
                                    <label htmlFor={order.orderId} className="ml-3 text-sm text-slate-200">{order.orderId} ({JSON.parse(order.lineItems)?.length || 0} items)</label>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
                <div className="p-4 bg-slate-900/50 rounded-b-lg flex justify-end">
                    <button onClick={handleAssign} className="bg-sky-600 text-white font-bold py-2 px-4 rounded-md hover:bg-sky-700 disabled:opacity-50" disabled={!selectedAgent || selectedOrders.length === 0}>
                        Assign {selectedOrders.length} Orders
                    </button>
                </div>
            </div>
        </div>
    );
};

const UpdateStatusModal = ({ order, onUpdate, onClose }: { order: Schema['Order'], onUpdate: Function, onClose: Function }) => (
    <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
        <div className="bg-slate-800 rounded-lg w-full max-w-md shadow-xl">
            <div className="p-4 border-b border-slate-700">
                <h2 className="text-lg font-bold text-white">Update Status for {order.orderId}</h2>
            </div>
            <div className="p-4 space-y-4">
                <p>Mark this order as delivered?</p>
            </div>
            <div className="p-4 bg-slate-900/50 rounded-b-lg flex justify-end space-x-2">
                <Button onClick={() => onClose()} variation="default">Cancel</Button>
                <Button onClick={() => onUpdate(order, 'DELIVERED')} variation="primary">Mark as Delivered</Button>
            </div>
        </div>
    </div>
);

// --- Main Export with Authenticator Wrapper ---
export default function AuthenticatedApp() {
  return (
    <Authenticator>
      <App />
    </Authenticator>
  );
}

